DEP 1: DEP Purpose and Guidelines
=================================

Created: 2014-04-14
Author: Adrian Holovaty
Status: Draft

What is a DEP?
==============

DEP stands for Django Enhancement Proposal. A DEP is a design document
providing information to the Django community, or describing a new feature
or process for Django. DEPs provide concise technical specifications of
features, along with rationales.

We intend DEPs to be the primary mechanisms for proposing major new features,
for collecting community input on issues, and for documenting design
decisions that have gone into Django.

The concept of DEPs is a blatant copy of Python's PEPs
(http://www.python.org/dev/peps/).

Rationale
=========

We're introducing the concept of DEPs in Django because we expect it to improve
our process of adding medium-to-large features in the framework.

Our traditional development process for medium-to-large features has been
haphazard. For almost 10 years (Django was open-sourced in July 2005),
developer communication and planning of new features has been spread across
these places:

    * The django-developers mailing list
      (http://groups.google.com/group/django-developers/).

    * The #django-dev IRC channel on Freenode.

    * Trac, our bug-tracking system (https://code.djangoproject.com/).

    * Comments sections of GitHub pull requests
      (https://github.com/django/django/pulls).

    * In person, at programming sprints around the world.

    * Occasional Skype chats among core developers.

This scattered approach worked to some extent, but the problem is obvious:
when communication about a new Django feature happens in all of these different
ways, it's hard for an outsider to get a sense of the feature's scope and
rationale. And it's *very* hard for future developers to piece together
the original design decisions for a given piece of Django.

Another problem has been getting clear "problem definitions" for new features.
Often, feature proposals get batted around on the django-developers mailing
list, with various people contributing small pieces to the idea. This is a
wonderfully messy and open process, but it's hard to get a quick overview
of a feature without reading through entire mailing-list threads, reconciling
the many micro-decisions made in the discussion. A big benefit to DEPs is that
you'll not only see all the information in one place, you're also able to see
the evolution of the feature idea by inspecting the DEP's revision-control
history.

When to write a DEP
===================

Django has a strong tradition of being pragmatic -- recall its tagline, "the
Web framework for perfectionists with deadlines." With that in mind, please
understand this important point: DEPs are NOT bureaucracy for bureaucracy's
sake.

DEPs are for medium-to-large Django features. It's ultimately a judgment call,
but here are some examples of existing Django features/efforts that would
have required a DEP:

    * Magic removal (https://code.djangoproject.com/wiki/RemovingTheMagic).

    * Changing Django to use all Unicode internally
      (https://code.djangoproject.com/wiki/UnicodeBranch).

    * Adding multi-database support.

    * Changing the template system to use auto-escaping
      (https://code.djangoproject.com/wiki/AutoEscaping).

    * Implementing database migrations.

Here are examples of that would *not* require a DEP:

    * Fixing a bug.

    * Changing some internal Django function to accept another argument for
      some edge case.

Use judgment. When in doubt, write a short DEP -- it shouldn't be much more
effort than writing a proposal to the django-developers mailing list.

Logistics
=========

Our process is intentionally lean at the moment, as we try to get it up and
running.

To submit a DEP, write a text document in the DEP format and submit it as a
pull request to the DEP GitHub repository (https://github.com/django/deps).
Put it in the "drafts" directory of the repository and give it a short name
that describes the feature, e.g. "magic-removal.txt".

The DEP format is reStructuredText, with "Created," "Author" and "Status"
fields near the top. For example, look at the top of this document. "Status"
should be "Draft" to start.

Beyond that, a DEP should include the following sections:

    * Overview. A sentence or short paragraph describing the feature.

    * Rationale. A few paragraphs describing why this feature is needed
      and what specific problem(s) it solves.

    * Implementation. A technical description of how this feature will
      be implemented. This may or may not include code snippets.

    * Copyright. A statement placing the document in the public domain.
      For example, see the bottom of this document.

Once you've written a DEP and submitted the pull request, post a message about
it to the django-developers mailing list. At that point, Django developers will
make sure it's technically feasible, not spam, etc., assign it a DEP number and
commit it to the repository as "Active." This doesn't mean the feature will be
implemented; it merely means the proposal is officially a DEP.

TODO: Next steps.

Copyright
=========

This document has been placed in the public domain.
